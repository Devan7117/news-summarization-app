# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HBRxmHnmyE30oX6BmXEIipfm8QPjwHIm
"""

# app.py
import streamlit as st
import requests
from gtts import gTTS
import os
from yake import KeywordExtractor
from keybert import KeyBERT
from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer
import json

# Step 1: Fetch News Articles and Remove Duplicates
def fetch_news(company_name, api_key):
    url = f"https://gnews.io/api/v4/search?q={company_name}&lang=en&max=10&apikey={api_key}"
    response = requests.get(url)
    data = response.json()
    articles = []
    seen_titles = set()  # To track unique titles

    if 'articles' in data:
        for item in data['articles']:
            title = item['title']
            if title not in seen_titles:  # Check for duplicates
                seen_titles.add(title)
                articles.append({
                    "Title": title,
                    "Summary": item['description'],
                    "Content": item['content']
                })
    return articles

# Step 2: Sentiment Analysis with VADER
def analyze_sentiment(text):
    analyzer = SentimentIntensityAnalyzer()
    sentiment_score = analyzer.polarity_scores(text)

    # Classify sentiment based on compound score
    if sentiment_score['compound'] >= 0.05:
        return "POSITIVE"
    elif sentiment_score['compound'] <= -0.05:
        return "NEGATIVE"
    else:
        return "NEUTRAL"

# Step 3: Topic Extraction (Improved with KeyBERT and Custom Stopwords)
def extract_topics(text):
    kw_model = KeyBERT()
    custom_stopwords = ["said", "says", "will", "also"]  # Add more stopwords if needed
    keywords = kw_model.extract_keywords(
        text,
        keyphrase_ngram_range=(2, 3),  # Focus on 2-3 word phrases
        stop_words=custom_stopwords,
        top_n=3
    )
    return [kw[0] for kw in keywords]  # Return top 3 keywords

# Step 4: Comparative Analysis
def compare_sentiments(articles):
    sentiment_counts = {"POSITIVE": 0, "NEGATIVE": 0, "NEUTRAL": 0}
    for article in articles:
        sentiment_counts[article['Sentiment']] += 1
    return sentiment_counts

# Step 5: Hindi TTS with Sentiment Counts and Key Insights
def text_to_speech(text, language='hi'):
    tts = gTTS(text=text, lang=language)
    tts.save("output.mp3")
    os.system("start output.mp3")  # Play the audio file

# Step 6: Generate Key Insights
def generate_key_insights(articles):
    insights = []
    for article in articles:
        if article['Sentiment'] == "NEGATIVE":
            insights.append(f"{article['Title']} में {article['Topics'][0]} के बारे में चिंता जताई गई है।")
        elif article['Sentiment'] == "POSITIVE":
            insights.append(f"{article['Title']} में {article['Topics'][0]} के बारे में सकारात्मक खबर है।")
    return insights

# Streamlit App
def main():
    st.title("News Summarization and Sentiment Analysis")

    # Input fields
    company_name = st.text_input("Enter Company Name")
    api_key = st.text_input("Enter GNews API Key", type="password")

    if st.button("Analyze"):
        if company_name and api_key:
            # Fetch news articles
            articles = fetch_news(company_name, api_key)

            # Perform sentiment analysis and topic extraction
            for article in articles:
                article['Sentiment'] = analyze_sentiment(article['Summary'])
                article['Topics'] = extract_topics(article['Content'])

            # Comparative sentiment analysis
            sentiment_distribution = compare_sentiments(articles)

            # Generate key insights
            key_insights = generate_key_insights(articles)

            # Display results
            st.write("### Comparative Sentiment Score")
            st.write(sentiment_distribution)

            st.write("### Articles")
            for article in articles:
                st.write(f"**Title**: {article['Title']}")
                st.write(f"**Summary**: {article['Summary']}")
                st.write(f"**Sentiment**: {article['Sentiment']}")
                st.write(f"**Topics**: {', '.join(article['Topics'])}")
                st.write("---")

            # Generate Hindi TTS
            hindi_summary = (
                f"{company_name} की खबरों का विश्लेषण पूरा हो गया है। "
                f"कुल {len(articles)} खबरों में से {sentiment_distribution['POSITIVE']} खबरें सकारात्मक, "
                f"{sentiment_distribution['NEGATIVE']} खबरें नकारात्मक, और {sentiment_distribution['NEUTRAL']} खबरें तटस्थ हैं। "
                f"ज्यादातर खबरें {max(sentiment_distribution, key=sentiment_distribution.get)} हैं। "
                f"{' '.join(key_insights)}"
            )
            st.write("### Hindi Summary")
            st.write(hindi_summary)

            # Play Hindi TTS
            text_to_speech(hindi_summary)
            st.audio("output.mp3")
        else:
            st.error("Please enter a company name and API key.")

if __name__ == "__main__":
    main()